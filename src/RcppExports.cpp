// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Sum_C
double Sum_C(NumericVector x);
RcppExport SEXP _BoostMLR_Sum_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Sum_C(x));
    return rcpp_result_gen;
END_RCPP
}
// Sum_C_NA
double Sum_C_NA(NumericVector x);
RcppExport SEXP _BoostMLR_Sum_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Sum_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// Sum_numericVectors
NumericVector Sum_numericVectors(NumericVector x, NumericVector y);
RcppExport SEXP _BoostMLR_Sum_numericVectors(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Sum_numericVectors(x, y));
    return rcpp_result_gen;
END_RCPP
}
// length_C_NA
int length_C_NA(NumericVector x);
RcppExport SEXP _BoostMLR_length_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(length_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// length_integer_C_NA
int length_integer_C_NA(IntegerVector x);
RcppExport SEXP _BoostMLR_length_integer_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(length_integer_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// length_character_C_NA
int length_character_C_NA(CharacterVector x);
RcppExport SEXP _BoostMLR_length_character_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(length_character_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// Mean_C
double Mean_C(NumericVector x);
RcppExport SEXP _BoostMLR_Mean_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Mean_C(x));
    return rcpp_result_gen;
END_RCPP
}
// Mean_C_NA
double Mean_C_NA(NumericVector x);
RcppExport SEXP _BoostMLR_Mean_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Mean_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// Which_C
IntegerVector Which_C(double x, NumericVector x_set);
RcppExport SEXP _BoostMLR_Which_C(SEXP xSEXP, SEXP x_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_set(x_setSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_C(x, x_set));
    return rcpp_result_gen;
END_RCPP
}
// Which_C_NA
IntegerVector Which_C_NA(double x, NumericVector x_set);
RcppExport SEXP _BoostMLR_Which_C_NA(SEXP xSEXP, SEXP x_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_set(x_setSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_C_NA(x, x_set));
    return rcpp_result_gen;
END_RCPP
}
// Which_direction_C_NA
IntegerVector Which_direction_C_NA(double x, NumericVector x_set, String direction);
RcppExport SEXP _BoostMLR_Which_direction_C_NA(SEXP xSEXP, SEXP x_setSEXP, SEXP directionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_set(x_setSEXP);
    Rcpp::traits::input_parameter< String >::type direction(directionSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_direction_C_NA(x, x_set, direction));
    return rcpp_result_gen;
END_RCPP
}
// Which_integer_C
IntegerVector Which_integer_C(int x, IntegerVector x_set);
RcppExport SEXP _BoostMLR_Which_integer_C(SEXP xSEXP, SEXP x_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x_set(x_setSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_integer_C(x, x_set));
    return rcpp_result_gen;
END_RCPP
}
// Which_integer_C_NA
IntegerVector Which_integer_C_NA(int x, IntegerVector x_set);
RcppExport SEXP _BoostMLR_Which_integer_C_NA(SEXP xSEXP, SEXP x_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x_set(x_setSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_integer_C_NA(x, x_set));
    return rcpp_result_gen;
END_RCPP
}
// create_integer_vector
IntegerVector create_integer_vector(int start_point, int end_point);
RcppExport SEXP _BoostMLR_create_integer_vector(SEXP start_pointSEXP, SEXP end_pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start_point(start_pointSEXP);
    Rcpp::traits::input_parameter< int >::type end_point(end_pointSEXP);
    rcpp_result_gen = Rcpp::wrap(create_integer_vector(start_point, end_point));
    return rcpp_result_gen;
END_RCPP
}
// Which_Min_C
int Which_Min_C(NumericVector x);
RcppExport SEXP _BoostMLR_Which_Min_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Min_C(x));
    return rcpp_result_gen;
END_RCPP
}
// Which_Min_C_NA
int Which_Min_C_NA(NumericVector x);
RcppExport SEXP _BoostMLR_Which_Min_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Min_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// Which_Min_C_NA_NRA
int Which_Min_C_NA_NRA(NumericVector x);
RcppExport SEXP _BoostMLR_Which_Min_C_NA_NRA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Min_C_NA_NRA(x));
    return rcpp_result_gen;
END_RCPP
}
// Which_Max_C
int Which_Max_C(NumericVector x);
RcppExport SEXP _BoostMLR_Which_Max_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Max_C(x));
    return rcpp_result_gen;
END_RCPP
}
// Which_Max_C_NA
int Which_Max_C_NA(NumericVector x);
RcppExport SEXP _BoostMLR_Which_Max_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Max_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// Which_Max_C_NA_NRA
int Which_Max_C_NA_NRA(NumericVector x);
RcppExport SEXP _BoostMLR_Which_Max_C_NA_NRA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Max_C_NA_NRA(x));
    return rcpp_result_gen;
END_RCPP
}
// StdVar_C
List StdVar_C(NumericMatrix MyMat);
RcppExport SEXP _BoostMLR_StdVar_C(SEXP MyMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type MyMat(MyMatSEXP);
    rcpp_result_gen = Rcpp::wrap(StdVar_C(MyMat));
    return rcpp_result_gen;
END_RCPP
}
// StdVar_C_NA_Supply_MeanSE
List StdVar_C_NA_Supply_MeanSE(NumericMatrix MyMat, NumericVector x_Mean, NumericVector x_Std_Error);
RcppExport SEXP _BoostMLR_StdVar_C_NA_Supply_MeanSE(SEXP MyMatSEXP, SEXP x_MeanSEXP, SEXP x_Std_ErrorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type MyMat(MyMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Mean(x_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Std_Error(x_Std_ErrorSEXP);
    rcpp_result_gen = Rcpp::wrap(StdVar_C_NA_Supply_MeanSE(MyMat, x_Mean, x_Std_Error));
    return rcpp_result_gen;
END_RCPP
}
// StdVar_C_NA
List StdVar_C_NA(NumericMatrix MyMat);
RcppExport SEXP _BoostMLR_StdVar_C_NA(SEXP MyMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type MyMat(MyMatSEXP);
    rcpp_result_gen = Rcpp::wrap(StdVar_C_NA(MyMat));
    return rcpp_result_gen;
END_RCPP
}
// Match_C
IntegerVector Match_C(NumericVector x_subset, NumericVector x_set);
RcppExport SEXP _BoostMLR_Match_C(SEXP x_subsetSEXP, SEXP x_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_subset(x_subsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_set(x_setSEXP);
    rcpp_result_gen = Rcpp::wrap(Match_C(x_subset, x_set));
    return rcpp_result_gen;
END_RCPP
}
// Match_C_NA
IntegerVector Match_C_NA(NumericVector x_subset, NumericVector x_set);
RcppExport SEXP _BoostMLR_Match_C_NA(SEXP x_subsetSEXP, SEXP x_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_subset(x_subsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_set(x_setSEXP);
    rcpp_result_gen = Rcpp::wrap(Match_C_NA(x_subset, x_set));
    return rcpp_result_gen;
END_RCPP
}
// Approx_Match_C
IntegerVector Approx_Match_C(NumericVector x, NumericVector y);
RcppExport SEXP _BoostMLR_Approx_Match_C(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Approx_Match_C(x, y));
    return rcpp_result_gen;
END_RCPP
}
// Approx_Match_C_NA
IntegerVector Approx_Match_C_NA(NumericVector x, NumericVector y);
RcppExport SEXP _BoostMLR_Approx_Match_C_NA(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Approx_Match_C_NA(x, y));
    return rcpp_result_gen;
END_RCPP
}
// Diag_Matrix_C
NumericMatrix Diag_Matrix_C(NumericVector x);
RcppExport SEXP _BoostMLR_Diag_Matrix_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Diag_Matrix_C(x));
    return rcpp_result_gen;
END_RCPP
}
// Matrix_Sum_C
NumericMatrix Matrix_Sum_C(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _BoostMLR_Matrix_Sum_C(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Matrix_Sum_C(x, y));
    return rcpp_result_gen;
END_RCPP
}
// Matrix_Sum_C_NA
NumericMatrix Matrix_Sum_C_NA(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _BoostMLR_Matrix_Sum_C_NA(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Matrix_Sum_C_NA(x, y));
    return rcpp_result_gen;
END_RCPP
}
// l2Dist_Vector_C
double l2Dist_Vector_C(NumericVector x1, NumericVector x2, List ID);
RcppExport SEXP _BoostMLR_l2Dist_Vector_C(SEXP x1SEXP, SEXP x2SEXP, SEXP IDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< List >::type ID(IDSEXP);
    rcpp_result_gen = Rcpp::wrap(l2Dist_Vector_C(x1, x2, ID));
    return rcpp_result_gen;
END_RCPP
}
// l2Dist_Vector_C_NA
double l2Dist_Vector_C_NA(NumericVector x1, NumericVector x2, List ID);
RcppExport SEXP _BoostMLR_l2Dist_Vector_C_NA(SEXP x1SEXP, SEXP x2SEXP, SEXP IDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< List >::type ID(IDSEXP);
    rcpp_result_gen = Rcpp::wrap(l2Dist_Vector_C_NA(x1, x2, ID));
    return rcpp_result_gen;
END_RCPP
}
// set_seed
void set_seed(unsigned long int seed);
RcppExport SEXP _BoostMLR_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned long int >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// randomShuffle
NumericVector randomShuffle(NumericVector x, int size, bool setting_seed, unsigned long int seed_value, bool replace, sugar::probs_t p);
RcppExport SEXP _BoostMLR_randomShuffle(SEXP xSEXP, SEXP sizeSEXP, SEXP setting_seedSEXP, SEXP seed_valueSEXP, SEXP replaceSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type setting_seed(setting_seedSEXP);
    Rcpp::traits::input_parameter< unsigned long int >::type seed_value(seed_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< sugar::probs_t >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(randomShuffle(x, size, setting_seed, seed_value, replace, p));
    return rcpp_result_gen;
END_RCPP
}
// int_randomShuffle
IntegerVector int_randomShuffle(IntegerVector x, int size, bool setting_seed, unsigned long int seed_value, bool replace, sugar::probs_t p);
RcppExport SEXP _BoostMLR_int_randomShuffle(SEXP xSEXP, SEXP sizeSEXP, SEXP setting_seedSEXP, SEXP seed_valueSEXP, SEXP replaceSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type setting_seed(setting_seedSEXP);
    Rcpp::traits::input_parameter< unsigned long int >::type seed_value(seed_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< sugar::probs_t >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(int_randomShuffle(x, size, setting_seed, seed_value, replace, p));
    return rcpp_result_gen;
END_RCPP
}
// single_integer_randomShuffle
int single_integer_randomShuffle(IntegerVector x, int size, bool setting_seed, unsigned long int seed_value, bool replace, sugar::probs_t p);
RcppExport SEXP _BoostMLR_single_integer_randomShuffle(SEXP xSEXP, SEXP sizeSEXP, SEXP setting_seedSEXP, SEXP seed_valueSEXP, SEXP replaceSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type setting_seed(setting_seedSEXP);
    Rcpp::traits::input_parameter< unsigned long int >::type seed_value(seed_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< sugar::probs_t >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(single_integer_randomShuffle(x, size, setting_seed, seed_value, replace, p));
    return rcpp_result_gen;
END_RCPP
}
// Reverse_Ordering
IntegerVector Reverse_Ordering(IntegerVector a);
RcppExport SEXP _BoostMLR_Reverse_Ordering(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(Reverse_Ordering(a));
    return rcpp_result_gen;
END_RCPP
}
// RemoveNA
NumericVector RemoveNA(NumericVector x);
RcppExport SEXP _BoostMLR_RemoveNA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(RemoveNA(x));
    return rcpp_result_gen;
END_RCPP
}
// RemoveNA_Integer
IntegerVector RemoveNA_Integer(IntegerVector x);
RcppExport SEXP _BoostMLR_RemoveNA_Integer(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(RemoveNA_Integer(x));
    return rcpp_result_gen;
END_RCPP
}
// RemoveNA_Character
CharacterVector RemoveNA_Character(CharacterVector x);
RcppExport SEXP _BoostMLR_RemoveNA_Character(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(RemoveNA_Character(x));
    return rcpp_result_gen;
END_RCPP
}
// Max_C_NA
double Max_C_NA(NumericVector x);
RcppExport SEXP _BoostMLR_Max_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Max_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// Max_upper_limit_C_NA
double Max_upper_limit_C_NA(NumericVector x, double x_upper_limit);
RcppExport SEXP _BoostMLR_Max_upper_limit_C_NA(SEXP xSEXP, SEXP x_upper_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type x_upper_limit(x_upper_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(Max_upper_limit_C_NA(x, x_upper_limit));
    return rcpp_result_gen;
END_RCPP
}
// Min_C_NA
double Min_C_NA(NumericVector x);
RcppExport SEXP _BoostMLR_Min_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Min_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// stl_sort
NumericVector stl_sort(NumericVector x);
RcppExport SEXP _BoostMLR_stl_sort(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stl_sort(x));
    return rcpp_result_gen;
END_RCPP
}
// stl_sort_NA
NumericVector stl_sort_NA(NumericVector x);
RcppExport SEXP _BoostMLR_stl_sort_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stl_sort_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// stl_sort_reverse
Rcpp::NumericVector stl_sort_reverse(Rcpp::NumericVector x);
RcppExport SEXP _BoostMLR_stl_sort_reverse(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stl_sort_reverse(x));
    return rcpp_result_gen;
END_RCPP
}
// stl_sort_reverse_NA
Rcpp::NumericVector stl_sort_reverse_NA(Rcpp::NumericVector x);
RcppExport SEXP _BoostMLR_stl_sort_reverse_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stl_sort_reverse_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// unique_C
NumericVector unique_C(NumericVector x);
RcppExport SEXP _BoostMLR_unique_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unique_C(x));
    return rcpp_result_gen;
END_RCPP
}
// unique_C_NA
NumericVector unique_C_NA(NumericVector x);
RcppExport SEXP _BoostMLR_unique_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unique_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// unique_character_C_NA
CharacterVector unique_character_C_NA(CharacterVector x);
RcppExport SEXP _BoostMLR_unique_character_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unique_character_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// unique_integer_C
IntegerVector unique_integer_C(IntegerVector x);
RcppExport SEXP _BoostMLR_unique_integer_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unique_integer_C(x));
    return rcpp_result_gen;
END_RCPP
}
// unique_integer_C_NA
IntegerVector unique_integer_C_NA(IntegerVector x);
RcppExport SEXP _BoostMLR_unique_integer_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unique_integer_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// cumulative_integer_sum
int cumulative_integer_sum(IntegerVector x);
RcppExport SEXP _BoostMLR_cumulative_integer_sum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cumulative_integer_sum(x));
    return rcpp_result_gen;
END_RCPP
}
// sort_unique_C
NumericVector sort_unique_C(NumericVector x);
RcppExport SEXP _BoostMLR_sort_unique_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_unique_C(x));
    return rcpp_result_gen;
END_RCPP
}
// sort_unique_C_NA
NumericVector sort_unique_C_NA(NumericVector x);
RcppExport SEXP _BoostMLR_sort_unique_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_unique_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// sort_unique_integer_C
IntegerVector sort_unique_integer_C(IntegerVector x);
RcppExport SEXP _BoostMLR_sort_unique_integer_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_unique_integer_C(x));
    return rcpp_result_gen;
END_RCPP
}
// sort_unique_integer_C_NA
IntegerVector sort_unique_integer_C_NA(IntegerVector x);
RcppExport SEXP _BoostMLR_sort_unique_integer_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_unique_integer_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// pmax_two_integers
int pmax_two_integers(int x1, int x2);
RcppExport SEXP _BoostMLR_pmax_two_integers(SEXP x1SEXP, SEXP x2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type x2(x2SEXP);
    rcpp_result_gen = Rcpp::wrap(pmax_two_integers(x1, x2));
    return rcpp_result_gen;
END_RCPP
}
// Which_Max_Matrix
IntegerVector Which_Max_Matrix(NumericMatrix x);
RcppExport SEXP _BoostMLR_Which_Max_Matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Max_Matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// Which_Max_Matrix_NA
IntegerVector Which_Max_Matrix_NA(NumericMatrix x);
RcppExport SEXP _BoostMLR_Which_Max_Matrix_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Max_Matrix_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// Which_Max_Matrix_NA_NRA
IntegerVector Which_Max_Matrix_NA_NRA(NumericMatrix x);
RcppExport SEXP _BoostMLR_Which_Max_Matrix_NA_NRA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Max_Matrix_NA_NRA(x));
    return rcpp_result_gen;
END_RCPP
}
// Which_Min_Matrix_NA
IntegerVector Which_Min_Matrix_NA(NumericMatrix x);
RcppExport SEXP _BoostMLR_Which_Min_Matrix_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Min_Matrix_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// Which_Min_Matrix_NA_NRA
IntegerVector Which_Min_Matrix_NA_NRA(NumericMatrix x);
RcppExport SEXP _BoostMLR_Which_Min_Matrix_NA_NRA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Min_Matrix_NA_NRA(x));
    return rcpp_result_gen;
END_RCPP
}
// rowSums_C
NumericVector rowSums_C(NumericMatrix x);
RcppExport SEXP _BoostMLR_rowSums_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSums_C(x));
    return rcpp_result_gen;
END_RCPP
}
// rowSums_C_NA
NumericVector rowSums_C_NA(NumericMatrix x);
RcppExport SEXP _BoostMLR_rowSums_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSums_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// isNA
LogicalVector isNA(IntegerVector x);
RcppExport SEXP _BoostMLR_isNA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isNA(x));
    return rcpp_result_gen;
END_RCPP
}
// isNA_Numeric
LogicalVector isNA_Numeric(NumericVector x);
RcppExport SEXP _BoostMLR_isNA_Numeric(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isNA_Numeric(x));
    return rcpp_result_gen;
END_RCPP
}
// any_function
bool any_function(LogicalVector x);
RcppExport SEXP _BoostMLR_any_function(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(any_function(x));
    return rcpp_result_gen;
END_RCPP
}
// all_function
bool all_function(LogicalVector x);
RcppExport SEXP _BoostMLR_all_function(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(all_function(x));
    return rcpp_result_gen;
END_RCPP
}
// Rho_Inv_C
double Rho_Inv_C(double Rho_Value, double N_Value);
RcppExport SEXP _BoostMLR_Rho_Inv_C(SEXP Rho_ValueSEXP, SEXP N_ValueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Rho_Value(Rho_ValueSEXP);
    Rcpp::traits::input_parameter< double >::type N_Value(N_ValueSEXP);
    rcpp_result_gen = Rcpp::wrap(Rho_Inv_C(Rho_Value, N_Value));
    return rcpp_result_gen;
END_RCPP
}
// MatrixInversion_Equicorrelation_C
arma::mat MatrixInversion_Equicorrelation_C(int N_Value, double phi, double rho);
RcppExport SEXP _BoostMLR_MatrixInversion_Equicorrelation_C(SEXP N_ValueSEXP, SEXP phiSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N_Value(N_ValueSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(MatrixInversion_Equicorrelation_C(N_Value, phi, rho));
    return rcpp_result_gen;
END_RCPP
}
// Matrix_Vector_Multiplication_C
NumericVector Matrix_Vector_Multiplication_C(arma::mat y, NumericVector x);
RcppExport SEXP _BoostMLR_Matrix_Vector_Multiplication_C(SEXP ySEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Matrix_Vector_Multiplication_C(y, x));
    return rcpp_result_gen;
END_RCPP
}
// Matrix_Vector_Multiplication_C_naObs
NumericVector Matrix_Vector_Multiplication_C_naObs(arma::mat y, NumericVector x);
RcppExport SEXP _BoostMLR_Matrix_Vector_Multiplication_C_naObs(SEXP ySEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Matrix_Vector_Multiplication_C_naObs(y, x));
    return rcpp_result_gen;
END_RCPP
}
// interaction_two_integer_sets
IntegerVector interaction_two_integer_sets(IntegerVector x, IntegerVector y);
RcppExport SEXP _BoostMLR_interaction_two_integer_sets(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(interaction_two_integer_sets(x, y));
    return rcpp_result_gen;
END_RCPP
}
// Matrix_Multiplication_Arma_C
arma::mat Matrix_Multiplication_Arma_C(arma::mat x, arma::mat y);
RcppExport SEXP _BoostMLR_Matrix_Multiplication_Arma_C(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Matrix_Multiplication_Arma_C(x, y));
    return rcpp_result_gen;
END_RCPP
}
// Matrix_Sum_Arma_C_NA
arma::mat Matrix_Sum_Arma_C_NA(arma::mat x, arma::mat y);
RcppExport SEXP _BoostMLR_Matrix_Sum_Arma_C_NA(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Matrix_Sum_Arma_C_NA(x, y));
    return rcpp_result_gen;
END_RCPP
}
// all_equal
bool all_equal(IntegerVector x, IntegerVector y);
RcppExport SEXP _BoostMLR_all_equal(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(all_equal(x, y));
    return rcpp_result_gen;
END_RCPP
}
// convert_double_string
String convert_double_string(double x);
RcppExport SEXP _BoostMLR_convert_double_string(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_double_string(x));
    return rcpp_result_gen;
END_RCPP
}
// round_NumVector
NumericVector round_NumVector(NumericVector x, int d);
RcppExport SEXP _BoostMLR_round_NumVector(SEXP xSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(round_NumVector(x, d));
    return rcpp_result_gen;
END_RCPP
}
// round_double
double round_double(double x, int d);
RcppExport SEXP _BoostMLR_round_double(SEXP xSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(round_double(x, d));
    return rcpp_result_gen;
END_RCPP
}
// Convert_DF_into_NumMat
NumericMatrix Convert_DF_into_NumMat(DataFrame x);
RcppExport SEXP _BoostMLR_Convert_DF_into_NumMat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Convert_DF_into_NumMat(x));
    return rcpp_result_gen;
END_RCPP
}
// DiagonalMatrix_C
arma::mat DiagonalMatrix_C(int Dimension, double x);
RcppExport SEXP _BoostMLR_DiagonalMatrix_C(SEXP DimensionSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Dimension(DimensionSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(DiagonalMatrix_C(Dimension, x));
    return rcpp_result_gen;
END_RCPP
}
// MatrixInversion_R
NumericMatrix MatrixInversion_R(NumericMatrix x);
RcppExport SEXP _BoostMLR_MatrixInversion_R(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(MatrixInversion_R(x));
    return rcpp_result_gen;
END_RCPP
}
// MatrixInversion_C
arma::mat MatrixInversion_C(arma::mat x);
RcppExport SEXP _BoostMLR_MatrixInversion_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(MatrixInversion_C(x));
    return rcpp_result_gen;
END_RCPP
}
// Subsetting_Dataframe
DataFrame Subsetting_Dataframe(DataFrame x, IntegerVector Index);
RcppExport SEXP _BoostMLR_Subsetting_Dataframe(SEXP xSEXP, SEXP IndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Index(IndexSEXP);
    rcpp_result_gen = Rcpp::wrap(Subsetting_Dataframe(x, Index));
    return rcpp_result_gen;
END_RCPP
}
// create_index_logical_vector
IntegerVector create_index_logical_vector(LogicalVector x);
RcppExport SEXP _BoostMLR_create_index_logical_vector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(create_index_logical_vector(x));
    return rcpp_result_gen;
END_RCPP
}
// create_variable_by_substitution
NumericVector create_variable_by_substitution(NumericVector x, NumericVector x_sub);
RcppExport SEXP _BoostMLR_create_variable_by_substitution(SEXP xSEXP, SEXP x_subSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_sub(x_subSEXP);
    rcpp_result_gen = Rcpp::wrap(create_variable_by_substitution(x, x_sub));
    return rcpp_result_gen;
END_RCPP
}
// create_sequence
NumericVector create_sequence(double min_value, double max_value, double by_amount);
RcppExport SEXP _BoostMLR_create_sequence(SEXP min_valueSEXP, SEXP max_valueSEXP, SEXP by_amountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type min_value(min_valueSEXP);
    Rcpp::traits::input_parameter< double >::type max_value(max_valueSEXP);
    Rcpp::traits::input_parameter< double >::type by_amount(by_amountSEXP);
    rcpp_result_gen = Rcpp::wrap(create_sequence(min_value, max_value, by_amount));
    return rcpp_result_gen;
END_RCPP
}
// fit_component_gls
arma::mat fit_component_gls(List x, List y, List v, bool add_intercept);
RcppExport SEXP _BoostMLR_fit_component_gls(SEXP xSEXP, SEXP ySEXP, SEXP vSEXP, SEXP add_interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type v(vSEXP);
    Rcpp::traits::input_parameter< bool >::type add_intercept(add_interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_component_gls(x, y, v, add_intercept));
    return rcpp_result_gen;
END_RCPP
}
// fit_component_gls_line_search
double fit_component_gls_line_search(List x, List y, List v);
RcppExport SEXP _BoostMLR_fit_component_gls_line_search(SEXP xSEXP, SEXP ySEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_component_gls_line_search(x, y, v));
    return rcpp_result_gen;
END_RCPP
}
// sq_residual
double sq_residual(List x, List y, arma::mat beta, bool add_intercept);
RcppExport SEXP _BoostMLR_sq_residual(SEXP xSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP add_interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type add_intercept(add_interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(sq_residual(x, y, beta, add_intercept));
    return rcpp_result_gen;
END_RCPP
}
// extract_linear_pred
arma::vec extract_linear_pred(int N, List Index, List x, arma::mat beta, bool add_intercept);
RcppExport SEXP _BoostMLR_extract_linear_pred(SEXP NSEXP, SEXP IndexSEXP, SEXP xSEXP, SEXP betaSEXP, SEXP add_interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< List >::type Index(IndexSEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type add_intercept(add_interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_linear_pred(N, Index, x, beta, add_intercept));
    return rcpp_result_gen;
END_RCPP
}
// extract_base_learner
NumericVector extract_base_learner(NumericVector x, arma::mat beta, bool add_intercept, int No_coef);
RcppExport SEXP _BoostMLR_extract_base_learner(SEXP xSEXP, SEXP betaSEXP, SEXP add_interceptSEXP, SEXP No_coefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type add_intercept(add_interceptSEXP);
    Rcpp::traits::input_parameter< int >::type No_coef(No_coefSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_base_learner(x, beta, add_intercept, No_coef));
    return rcpp_result_gen;
END_RCPP
}
// extract_mu
arma::vec extract_mu(arma::vec x, String link);
RcppExport SEXP _BoostMLR_extract_mu(SEXP xSEXP, SEXP linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< String >::type link(linkSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_mu(x, link));
    return rcpp_result_gen;
END_RCPP
}
// DataProcessing_C
List DataProcessing_C(NumericMatrix Org_x, NumericMatrix Org_y, NumericVector id, NumericVector tm, NumericVector id_x, NumericVector tm_x, NumericVector unq_id, bool x_miss, bool trace, bool y_summary_supply, NumericVector y_mean_supply, NumericVector y_std_error_supply);
RcppExport SEXP _BoostMLR_DataProcessing_C(SEXP Org_xSEXP, SEXP Org_ySEXP, SEXP idSEXP, SEXP tmSEXP, SEXP id_xSEXP, SEXP tm_xSEXP, SEXP unq_idSEXP, SEXP x_missSEXP, SEXP traceSEXP, SEXP y_summary_supplySEXP, SEXP y_mean_supplySEXP, SEXP y_std_error_supplySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_x(Org_xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_y(Org_ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tm(tmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id_x(id_xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tm_x(tm_xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unq_id(unq_idSEXP);
    Rcpp::traits::input_parameter< bool >::type x_miss(x_missSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< bool >::type y_summary_supply(y_summary_supplySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_mean_supply(y_mean_supplySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_std_error_supply(y_std_error_supplySEXP);
    rcpp_result_gen = Rcpp::wrap(DataProcessing_C(Org_x, Org_y, id, tm, id_x, tm_x, unq_id, x_miss, trace, y_summary_supply, y_mean_supply, y_std_error_supply));
    return rcpp_result_gen;
END_RCPP
}
// BoostMLR_C
List BoostMLR_C(NumericMatrix Org_x, NumericMatrix Org_y, NumericVector id, NumericVector tm, NumericMatrix x, NumericMatrix y, NumericVector id_x, NumericVector tm_x, NumericVector x_Mean, NumericVector x_Std_Error, NumericVector y_Mean, NumericVector y_Std_Error, String y_scale_summary, bool intercept, List time_map, int n, int K, int L, int H, int G, IntegerVector Dk, IntegerVector ni, IntegerVector ni_x, int N, int N_x, NumericVector unq_id, NumericVector unq_tm, NumericVector unq_tm_x, List unq_x, List id_index, List id_index_x, NumericMatrix Bt, NumericMatrix Bt_x, List Bx, List Bx_Scale, double Bx_Scale_const, NumericMatrix Time_Add_New, LogicalVector Time_Unmatch, double nu, int M, bool Mod_Grad, LogicalVector UseRaw, NumericVector Lambda_Ridge_Vec, bool Ridge_Penalty, bool Shrink, double lower_perc, double upper_perc, double Lambda_Scale, int NLambda, bool VarFlag, NumericVector rho, NumericVector phi, bool setting_seed, unsigned long int seed_value, bool sq_residual_select, bool update_all_comp, List comp_x, List comp_y, bool Verbose, bool Trace);
RcppExport SEXP _BoostMLR_BoostMLR_C(SEXP Org_xSEXP, SEXP Org_ySEXP, SEXP idSEXP, SEXP tmSEXP, SEXP xSEXP, SEXP ySEXP, SEXP id_xSEXP, SEXP tm_xSEXP, SEXP x_MeanSEXP, SEXP x_Std_ErrorSEXP, SEXP y_MeanSEXP, SEXP y_Std_ErrorSEXP, SEXP y_scale_summarySEXP, SEXP interceptSEXP, SEXP time_mapSEXP, SEXP nSEXP, SEXP KSEXP, SEXP LSEXP, SEXP HSEXP, SEXP GSEXP, SEXP DkSEXP, SEXP niSEXP, SEXP ni_xSEXP, SEXP NSEXP, SEXP N_xSEXP, SEXP unq_idSEXP, SEXP unq_tmSEXP, SEXP unq_tm_xSEXP, SEXP unq_xSEXP, SEXP id_indexSEXP, SEXP id_index_xSEXP, SEXP BtSEXP, SEXP Bt_xSEXP, SEXP BxSEXP, SEXP Bx_ScaleSEXP, SEXP Bx_Scale_constSEXP, SEXP Time_Add_NewSEXP, SEXP Time_UnmatchSEXP, SEXP nuSEXP, SEXP MSEXP, SEXP Mod_GradSEXP, SEXP UseRawSEXP, SEXP Lambda_Ridge_VecSEXP, SEXP Ridge_PenaltySEXP, SEXP ShrinkSEXP, SEXP lower_percSEXP, SEXP upper_percSEXP, SEXP Lambda_ScaleSEXP, SEXP NLambdaSEXP, SEXP VarFlagSEXP, SEXP rhoSEXP, SEXP phiSEXP, SEXP setting_seedSEXP, SEXP seed_valueSEXP, SEXP sq_residual_selectSEXP, SEXP update_all_compSEXP, SEXP comp_xSEXP, SEXP comp_ySEXP, SEXP VerboseSEXP, SEXP TraceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_x(Org_xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_y(Org_ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tm(tmSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id_x(id_xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tm_x(tm_xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Mean(x_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Std_Error(x_Std_ErrorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_Mean(y_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_Std_Error(y_Std_ErrorSEXP);
    Rcpp::traits::input_parameter< String >::type y_scale_summary(y_scale_summarySEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< List >::type time_map(time_mapSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Dk(DkSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ni(niSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ni_x(ni_xSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type N_x(N_xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unq_id(unq_idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unq_tm(unq_tmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unq_tm_x(unq_tm_xSEXP);
    Rcpp::traits::input_parameter< List >::type unq_x(unq_xSEXP);
    Rcpp::traits::input_parameter< List >::type id_index(id_indexSEXP);
    Rcpp::traits::input_parameter< List >::type id_index_x(id_index_xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bt(BtSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bt_x(Bt_xSEXP);
    Rcpp::traits::input_parameter< List >::type Bx(BxSEXP);
    Rcpp::traits::input_parameter< List >::type Bx_Scale(Bx_ScaleSEXP);
    Rcpp::traits::input_parameter< double >::type Bx_Scale_const(Bx_Scale_constSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Time_Add_New(Time_Add_NewSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type Time_Unmatch(Time_UnmatchSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< bool >::type Mod_Grad(Mod_GradSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type UseRaw(UseRawSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Lambda_Ridge_Vec(Lambda_Ridge_VecSEXP);
    Rcpp::traits::input_parameter< bool >::type Ridge_Penalty(Ridge_PenaltySEXP);
    Rcpp::traits::input_parameter< bool >::type Shrink(ShrinkSEXP);
    Rcpp::traits::input_parameter< double >::type lower_perc(lower_percSEXP);
    Rcpp::traits::input_parameter< double >::type upper_perc(upper_percSEXP);
    Rcpp::traits::input_parameter< double >::type Lambda_Scale(Lambda_ScaleSEXP);
    Rcpp::traits::input_parameter< int >::type NLambda(NLambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type VarFlag(VarFlagSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< bool >::type setting_seed(setting_seedSEXP);
    Rcpp::traits::input_parameter< unsigned long int >::type seed_value(seed_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type sq_residual_select(sq_residual_selectSEXP);
    Rcpp::traits::input_parameter< bool >::type update_all_comp(update_all_compSEXP);
    Rcpp::traits::input_parameter< List >::type comp_x(comp_xSEXP);
    Rcpp::traits::input_parameter< List >::type comp_y(comp_ySEXP);
    Rcpp::traits::input_parameter< bool >::type Verbose(VerboseSEXP);
    Rcpp::traits::input_parameter< bool >::type Trace(TraceSEXP);
    rcpp_result_gen = Rcpp::wrap(BoostMLR_C(Org_x, Org_y, id, tm, x, y, id_x, tm_x, x_Mean, x_Std_Error, y_Mean, y_Std_Error, y_scale_summary, intercept, time_map, n, K, L, H, G, Dk, ni, ni_x, N, N_x, unq_id, unq_tm, unq_tm_x, unq_x, id_index, id_index_x, Bt, Bt_x, Bx, Bx_Scale, Bx_Scale_const, Time_Add_New, Time_Unmatch, nu, M, Mod_Grad, UseRaw, Lambda_Ridge_Vec, Ridge_Penalty, Shrink, lower_perc, upper_perc, Lambda_Scale, NLambda, VarFlag, rho, phi, setting_seed, seed_value, sq_residual_select, update_all_comp, comp_x, comp_y, Verbose, Trace));
    return rcpp_result_gen;
END_RCPP
}
// update_BoostMLR_C
List update_BoostMLR_C(NumericMatrix Org_x, NumericMatrix Org_y, NumericVector id, NumericVector tm, NumericMatrix x, NumericMatrix y, NumericVector x_Mean, NumericVector x_Std_Error, NumericVector y_Mean, NumericVector y_Std_Error, int n, int K, int L, int H, IntegerVector Dk, IntegerVector ni, int N, NumericVector unq_id, NumericVector unq_tm, List unq_x, List id_index, List tm_index, List x_index, NumericMatrix Bt, List Bx, List Bt_H, List Bx_K, List Bxt, List Bx_Scale, double nu, int M, int M_New, LogicalVector UseRaw, bool Shrink, bool Ridge_Penalty, NumericVector Lambda_Ridge_Vec, double Lambda_Scale, int NLambda, double lower_perc, double upper_perc, List Lambda_List, NumericMatrix mu, List mu_List, NumericMatrix mu_zero, NumericVector Vec_zero, NumericMatrix Error_Rate, IntegerMatrix Variable_Select, IntegerMatrix Response_Select, List Beta_Hat_List, List Sum_Beta_Hat_List, List Beta, List Beta_Hat_List_Iter, List lower_Beta_Hat_Noise, List upper_Beta_Hat_Noise, List List_Trace_Bxt_gm, bool Mod_Grad, bool VarFlag, NumericVector phi, NumericVector rho, NumericMatrix Phi, NumericMatrix Rho, bool setting_seed, unsigned long int seed_value, bool Verbose);
RcppExport SEXP _BoostMLR_update_BoostMLR_C(SEXP Org_xSEXP, SEXP Org_ySEXP, SEXP idSEXP, SEXP tmSEXP, SEXP xSEXP, SEXP ySEXP, SEXP x_MeanSEXP, SEXP x_Std_ErrorSEXP, SEXP y_MeanSEXP, SEXP y_Std_ErrorSEXP, SEXP nSEXP, SEXP KSEXP, SEXP LSEXP, SEXP HSEXP, SEXP DkSEXP, SEXP niSEXP, SEXP NSEXP, SEXP unq_idSEXP, SEXP unq_tmSEXP, SEXP unq_xSEXP, SEXP id_indexSEXP, SEXP tm_indexSEXP, SEXP x_indexSEXP, SEXP BtSEXP, SEXP BxSEXP, SEXP Bt_HSEXP, SEXP Bx_KSEXP, SEXP BxtSEXP, SEXP Bx_ScaleSEXP, SEXP nuSEXP, SEXP MSEXP, SEXP M_NewSEXP, SEXP UseRawSEXP, SEXP ShrinkSEXP, SEXP Ridge_PenaltySEXP, SEXP Lambda_Ridge_VecSEXP, SEXP Lambda_ScaleSEXP, SEXP NLambdaSEXP, SEXP lower_percSEXP, SEXP upper_percSEXP, SEXP Lambda_ListSEXP, SEXP muSEXP, SEXP mu_ListSEXP, SEXP mu_zeroSEXP, SEXP Vec_zeroSEXP, SEXP Error_RateSEXP, SEXP Variable_SelectSEXP, SEXP Response_SelectSEXP, SEXP Beta_Hat_ListSEXP, SEXP Sum_Beta_Hat_ListSEXP, SEXP BetaSEXP, SEXP Beta_Hat_List_IterSEXP, SEXP lower_Beta_Hat_NoiseSEXP, SEXP upper_Beta_Hat_NoiseSEXP, SEXP List_Trace_Bxt_gmSEXP, SEXP Mod_GradSEXP, SEXP VarFlagSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP PhiSEXP, SEXP RhoSEXP, SEXP setting_seedSEXP, SEXP seed_valueSEXP, SEXP VerboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_x(Org_xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_y(Org_ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tm(tmSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Mean(x_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Std_Error(x_Std_ErrorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_Mean(y_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_Std_Error(y_Std_ErrorSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Dk(DkSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ni(niSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unq_id(unq_idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unq_tm(unq_tmSEXP);
    Rcpp::traits::input_parameter< List >::type unq_x(unq_xSEXP);
    Rcpp::traits::input_parameter< List >::type id_index(id_indexSEXP);
    Rcpp::traits::input_parameter< List >::type tm_index(tm_indexSEXP);
    Rcpp::traits::input_parameter< List >::type x_index(x_indexSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bt(BtSEXP);
    Rcpp::traits::input_parameter< List >::type Bx(BxSEXP);
    Rcpp::traits::input_parameter< List >::type Bt_H(Bt_HSEXP);
    Rcpp::traits::input_parameter< List >::type Bx_K(Bx_KSEXP);
    Rcpp::traits::input_parameter< List >::type Bxt(BxtSEXP);
    Rcpp::traits::input_parameter< List >::type Bx_Scale(Bx_ScaleSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type M_New(M_NewSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type UseRaw(UseRawSEXP);
    Rcpp::traits::input_parameter< bool >::type Shrink(ShrinkSEXP);
    Rcpp::traits::input_parameter< bool >::type Ridge_Penalty(Ridge_PenaltySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Lambda_Ridge_Vec(Lambda_Ridge_VecSEXP);
    Rcpp::traits::input_parameter< double >::type Lambda_Scale(Lambda_ScaleSEXP);
    Rcpp::traits::input_parameter< int >::type NLambda(NLambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lower_perc(lower_percSEXP);
    Rcpp::traits::input_parameter< double >::type upper_perc(upper_percSEXP);
    Rcpp::traits::input_parameter< List >::type Lambda_List(Lambda_ListSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mu(muSEXP);
    Rcpp::traits::input_parameter< List >::type mu_List(mu_ListSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mu_zero(mu_zeroSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Vec_zero(Vec_zeroSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Error_Rate(Error_RateSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type Variable_Select(Variable_SelectSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type Response_Select(Response_SelectSEXP);
    Rcpp::traits::input_parameter< List >::type Beta_Hat_List(Beta_Hat_ListSEXP);
    Rcpp::traits::input_parameter< List >::type Sum_Beta_Hat_List(Sum_Beta_Hat_ListSEXP);
    Rcpp::traits::input_parameter< List >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< List >::type Beta_Hat_List_Iter(Beta_Hat_List_IterSEXP);
    Rcpp::traits::input_parameter< List >::type lower_Beta_Hat_Noise(lower_Beta_Hat_NoiseSEXP);
    Rcpp::traits::input_parameter< List >::type upper_Beta_Hat_Noise(upper_Beta_Hat_NoiseSEXP);
    Rcpp::traits::input_parameter< List >::type List_Trace_Bxt_gm(List_Trace_Bxt_gmSEXP);
    Rcpp::traits::input_parameter< bool >::type Mod_Grad(Mod_GradSEXP);
    Rcpp::traits::input_parameter< bool >::type VarFlag(VarFlagSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Rho(RhoSEXP);
    Rcpp::traits::input_parameter< bool >::type setting_seed(setting_seedSEXP);
    Rcpp::traits::input_parameter< unsigned long int >::type seed_value(seed_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type Verbose(VerboseSEXP);
    rcpp_result_gen = Rcpp::wrap(update_BoostMLR_C(Org_x, Org_y, id, tm, x, y, x_Mean, x_Std_Error, y_Mean, y_Std_Error, n, K, L, H, Dk, ni, N, unq_id, unq_tm, unq_x, id_index, tm_index, x_index, Bt, Bx, Bt_H, Bx_K, Bxt, Bx_Scale, nu, M, M_New, UseRaw, Shrink, Ridge_Penalty, Lambda_Ridge_Vec, Lambda_Scale, NLambda, lower_perc, upper_perc, Lambda_List, mu, mu_List, mu_zero, Vec_zero, Error_Rate, Variable_Select, Response_Select, Beta_Hat_List, Sum_Beta_Hat_List, Beta, Beta_Hat_List_Iter, lower_Beta_Hat_Noise, upper_Beta_Hat_Noise, List_Trace_Bxt_gm, Mod_Grad, VarFlag, phi, rho, Phi, Rho, setting_seed, seed_value, Verbose));
    return rcpp_result_gen;
END_RCPP
}
// predict_BoostMLR_C
List predict_BoostMLR_C(NumericMatrix Org_x, NumericVector tm, NumericVector id, NumericMatrix Org_y, NumericVector id_x, NumericVector tm_x, NumericVector x_Mean, NumericVector x_Std_Error, NumericVector y_Mean, NumericVector y_Std_Error, bool intercept, String y_scale_summary, List time_map, int K, int L, int H, int G, IntegerVector Dk, NumericVector unq_id, NumericVector unq_tm, NumericVector unq_tm_x, List unq_x, NumericMatrix Bt, NumericMatrix Bt_x, List Bx, LogicalVector UseRaw, NumericMatrix Time_Add_New, LogicalVector Time_Unmatch, List Beta, List Beta_Hat_List, bool testFlag, int M, double nu, bool Time_Varying, bool vimpFlag, bool vimpFlag_Coef, double eps, bool setting_seed, unsigned long int seed_value);
RcppExport SEXP _BoostMLR_predict_BoostMLR_C(SEXP Org_xSEXP, SEXP tmSEXP, SEXP idSEXP, SEXP Org_ySEXP, SEXP id_xSEXP, SEXP tm_xSEXP, SEXP x_MeanSEXP, SEXP x_Std_ErrorSEXP, SEXP y_MeanSEXP, SEXP y_Std_ErrorSEXP, SEXP interceptSEXP, SEXP y_scale_summarySEXP, SEXP time_mapSEXP, SEXP KSEXP, SEXP LSEXP, SEXP HSEXP, SEXP GSEXP, SEXP DkSEXP, SEXP unq_idSEXP, SEXP unq_tmSEXP, SEXP unq_tm_xSEXP, SEXP unq_xSEXP, SEXP BtSEXP, SEXP Bt_xSEXP, SEXP BxSEXP, SEXP UseRawSEXP, SEXP Time_Add_NewSEXP, SEXP Time_UnmatchSEXP, SEXP BetaSEXP, SEXP Beta_Hat_ListSEXP, SEXP testFlagSEXP, SEXP MSEXP, SEXP nuSEXP, SEXP Time_VaryingSEXP, SEXP vimpFlagSEXP, SEXP vimpFlag_CoefSEXP, SEXP epsSEXP, SEXP setting_seedSEXP, SEXP seed_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_x(Org_xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tm(tmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_y(Org_ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id_x(id_xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tm_x(tm_xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Mean(x_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Std_Error(x_Std_ErrorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_Mean(y_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_Std_Error(y_Std_ErrorSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< String >::type y_scale_summary(y_scale_summarySEXP);
    Rcpp::traits::input_parameter< List >::type time_map(time_mapSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Dk(DkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unq_id(unq_idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unq_tm(unq_tmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unq_tm_x(unq_tm_xSEXP);
    Rcpp::traits::input_parameter< List >::type unq_x(unq_xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bt(BtSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bt_x(Bt_xSEXP);
    Rcpp::traits::input_parameter< List >::type Bx(BxSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type UseRaw(UseRawSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Time_Add_New(Time_Add_NewSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type Time_Unmatch(Time_UnmatchSEXP);
    Rcpp::traits::input_parameter< List >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< List >::type Beta_Hat_List(Beta_Hat_ListSEXP);
    Rcpp::traits::input_parameter< bool >::type testFlag(testFlagSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type Time_Varying(Time_VaryingSEXP);
    Rcpp::traits::input_parameter< bool >::type vimpFlag(vimpFlagSEXP);
    Rcpp::traits::input_parameter< bool >::type vimpFlag_Coef(vimpFlag_CoefSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type setting_seed(setting_seedSEXP);
    Rcpp::traits::input_parameter< unsigned long int >::type seed_value(seed_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_BoostMLR_C(Org_x, tm, id, Org_y, id_x, tm_x, x_Mean, x_Std_Error, y_Mean, y_Std_Error, intercept, y_scale_summary, time_map, K, L, H, G, Dk, unq_id, unq_tm, unq_tm_x, unq_x, Bt, Bt_x, Bx, UseRaw, Time_Add_New, Time_Unmatch, Beta, Beta_Hat_List, testFlag, M, nu, Time_Varying, vimpFlag, vimpFlag_Coef, eps, setting_seed, seed_value));
    return rcpp_result_gen;
END_RCPP
}
// vimp_BoostMLR_C
List vimp_BoostMLR_C(NumericMatrix Org_x, NumericMatrix Org_y, NumericVector tm, NumericVector id, NumericVector id_x, NumericVector tm_x, NumericVector x_Mean, NumericVector x_Std_Error, NumericVector y_Mean, NumericVector y_Std_Error, bool intercept, String y_scale_summary, int n, IntegerVector ni, IntegerVector ni_x, int N, int N_x, int L, int K, int p, int H, int G, IntegerVector Dk, int n_unq_tm, int n_unq_tm_x, LogicalVector UseRaw, List id_index, List id_index_x, List tm_index, List tm_index_x, List unq_x_New, IntegerVector Index_Bt, IntegerVector Index_Bt_x, IntegerVector vimp_set, bool joint, NumericMatrix Bt, NumericMatrix Bt_x, List Bt_H, List Bt_G, List Bx, List Bxt, List Bx_K, List time_map, List Beta_Hat_List, IntegerVector Mopt, double nu, NumericVector rmse, bool Time_Varying, NumericVector Vec_zero, NumericMatrix mu_zero_vec, bool setting_seed, unsigned long int seed_value);
RcppExport SEXP _BoostMLR_vimp_BoostMLR_C(SEXP Org_xSEXP, SEXP Org_ySEXP, SEXP tmSEXP, SEXP idSEXP, SEXP id_xSEXP, SEXP tm_xSEXP, SEXP x_MeanSEXP, SEXP x_Std_ErrorSEXP, SEXP y_MeanSEXP, SEXP y_Std_ErrorSEXP, SEXP interceptSEXP, SEXP y_scale_summarySEXP, SEXP nSEXP, SEXP niSEXP, SEXP ni_xSEXP, SEXP NSEXP, SEXP N_xSEXP, SEXP LSEXP, SEXP KSEXP, SEXP pSEXP, SEXP HSEXP, SEXP GSEXP, SEXP DkSEXP, SEXP n_unq_tmSEXP, SEXP n_unq_tm_xSEXP, SEXP UseRawSEXP, SEXP id_indexSEXP, SEXP id_index_xSEXP, SEXP tm_indexSEXP, SEXP tm_index_xSEXP, SEXP unq_x_NewSEXP, SEXP Index_BtSEXP, SEXP Index_Bt_xSEXP, SEXP vimp_setSEXP, SEXP jointSEXP, SEXP BtSEXP, SEXP Bt_xSEXP, SEXP Bt_HSEXP, SEXP Bt_GSEXP, SEXP BxSEXP, SEXP BxtSEXP, SEXP Bx_KSEXP, SEXP time_mapSEXP, SEXP Beta_Hat_ListSEXP, SEXP MoptSEXP, SEXP nuSEXP, SEXP rmseSEXP, SEXP Time_VaryingSEXP, SEXP Vec_zeroSEXP, SEXP mu_zero_vecSEXP, SEXP setting_seedSEXP, SEXP seed_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_x(Org_xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_y(Org_ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tm(tmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id_x(id_xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tm_x(tm_xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Mean(x_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Std_Error(x_Std_ErrorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_Mean(y_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_Std_Error(y_Std_ErrorSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< String >::type y_scale_summary(y_scale_summarySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ni(niSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ni_x(ni_xSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type N_x(N_xSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Dk(DkSEXP);
    Rcpp::traits::input_parameter< int >::type n_unq_tm(n_unq_tmSEXP);
    Rcpp::traits::input_parameter< int >::type n_unq_tm_x(n_unq_tm_xSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type UseRaw(UseRawSEXP);
    Rcpp::traits::input_parameter< List >::type id_index(id_indexSEXP);
    Rcpp::traits::input_parameter< List >::type id_index_x(id_index_xSEXP);
    Rcpp::traits::input_parameter< List >::type tm_index(tm_indexSEXP);
    Rcpp::traits::input_parameter< List >::type tm_index_x(tm_index_xSEXP);
    Rcpp::traits::input_parameter< List >::type unq_x_New(unq_x_NewSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Index_Bt(Index_BtSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Index_Bt_x(Index_Bt_xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vimp_set(vimp_setSEXP);
    Rcpp::traits::input_parameter< bool >::type joint(jointSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bt(BtSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bt_x(Bt_xSEXP);
    Rcpp::traits::input_parameter< List >::type Bt_H(Bt_HSEXP);
    Rcpp::traits::input_parameter< List >::type Bt_G(Bt_GSEXP);
    Rcpp::traits::input_parameter< List >::type Bx(BxSEXP);
    Rcpp::traits::input_parameter< List >::type Bxt(BxtSEXP);
    Rcpp::traits::input_parameter< List >::type Bx_K(Bx_KSEXP);
    Rcpp::traits::input_parameter< List >::type time_map(time_mapSEXP);
    Rcpp::traits::input_parameter< List >::type Beta_Hat_List(Beta_Hat_ListSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Mopt(MoptSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rmse(rmseSEXP);
    Rcpp::traits::input_parameter< bool >::type Time_Varying(Time_VaryingSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Vec_zero(Vec_zeroSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mu_zero_vec(mu_zero_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type setting_seed(setting_seedSEXP);
    Rcpp::traits::input_parameter< unsigned long int >::type seed_value(seed_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(vimp_BoostMLR_C(Org_x, Org_y, tm, id, id_x, tm_x, x_Mean, x_Std_Error, y_Mean, y_Std_Error, intercept, y_scale_summary, n, ni, ni_x, N, N_x, L, K, p, H, G, Dk, n_unq_tm, n_unq_tm_x, UseRaw, id_index, id_index_x, tm_index, tm_index_x, unq_x_New, Index_Bt, Index_Bt_x, vimp_set, joint, Bt, Bt_x, Bt_H, Bt_G, Bx, Bxt, Bx_K, time_map, Beta_Hat_List, Mopt, nu, rmse, Time_Varying, Vec_zero, mu_zero_vec, setting_seed, seed_value));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BoostMLR_Sum_C", (DL_FUNC) &_BoostMLR_Sum_C, 1},
    {"_BoostMLR_Sum_C_NA", (DL_FUNC) &_BoostMLR_Sum_C_NA, 1},
    {"_BoostMLR_Sum_numericVectors", (DL_FUNC) &_BoostMLR_Sum_numericVectors, 2},
    {"_BoostMLR_length_C_NA", (DL_FUNC) &_BoostMLR_length_C_NA, 1},
    {"_BoostMLR_length_integer_C_NA", (DL_FUNC) &_BoostMLR_length_integer_C_NA, 1},
    {"_BoostMLR_length_character_C_NA", (DL_FUNC) &_BoostMLR_length_character_C_NA, 1},
    {"_BoostMLR_Mean_C", (DL_FUNC) &_BoostMLR_Mean_C, 1},
    {"_BoostMLR_Mean_C_NA", (DL_FUNC) &_BoostMLR_Mean_C_NA, 1},
    {"_BoostMLR_Which_C", (DL_FUNC) &_BoostMLR_Which_C, 2},
    {"_BoostMLR_Which_C_NA", (DL_FUNC) &_BoostMLR_Which_C_NA, 2},
    {"_BoostMLR_Which_direction_C_NA", (DL_FUNC) &_BoostMLR_Which_direction_C_NA, 3},
    {"_BoostMLR_Which_integer_C", (DL_FUNC) &_BoostMLR_Which_integer_C, 2},
    {"_BoostMLR_Which_integer_C_NA", (DL_FUNC) &_BoostMLR_Which_integer_C_NA, 2},
    {"_BoostMLR_create_integer_vector", (DL_FUNC) &_BoostMLR_create_integer_vector, 2},
    {"_BoostMLR_Which_Min_C", (DL_FUNC) &_BoostMLR_Which_Min_C, 1},
    {"_BoostMLR_Which_Min_C_NA", (DL_FUNC) &_BoostMLR_Which_Min_C_NA, 1},
    {"_BoostMLR_Which_Min_C_NA_NRA", (DL_FUNC) &_BoostMLR_Which_Min_C_NA_NRA, 1},
    {"_BoostMLR_Which_Max_C", (DL_FUNC) &_BoostMLR_Which_Max_C, 1},
    {"_BoostMLR_Which_Max_C_NA", (DL_FUNC) &_BoostMLR_Which_Max_C_NA, 1},
    {"_BoostMLR_Which_Max_C_NA_NRA", (DL_FUNC) &_BoostMLR_Which_Max_C_NA_NRA, 1},
    {"_BoostMLR_StdVar_C", (DL_FUNC) &_BoostMLR_StdVar_C, 1},
    {"_BoostMLR_StdVar_C_NA_Supply_MeanSE", (DL_FUNC) &_BoostMLR_StdVar_C_NA_Supply_MeanSE, 3},
    {"_BoostMLR_StdVar_C_NA", (DL_FUNC) &_BoostMLR_StdVar_C_NA, 1},
    {"_BoostMLR_Match_C", (DL_FUNC) &_BoostMLR_Match_C, 2},
    {"_BoostMLR_Match_C_NA", (DL_FUNC) &_BoostMLR_Match_C_NA, 2},
    {"_BoostMLR_Approx_Match_C", (DL_FUNC) &_BoostMLR_Approx_Match_C, 2},
    {"_BoostMLR_Approx_Match_C_NA", (DL_FUNC) &_BoostMLR_Approx_Match_C_NA, 2},
    {"_BoostMLR_Diag_Matrix_C", (DL_FUNC) &_BoostMLR_Diag_Matrix_C, 1},
    {"_BoostMLR_Matrix_Sum_C", (DL_FUNC) &_BoostMLR_Matrix_Sum_C, 2},
    {"_BoostMLR_Matrix_Sum_C_NA", (DL_FUNC) &_BoostMLR_Matrix_Sum_C_NA, 2},
    {"_BoostMLR_l2Dist_Vector_C", (DL_FUNC) &_BoostMLR_l2Dist_Vector_C, 3},
    {"_BoostMLR_l2Dist_Vector_C_NA", (DL_FUNC) &_BoostMLR_l2Dist_Vector_C_NA, 3},
    {"_BoostMLR_set_seed", (DL_FUNC) &_BoostMLR_set_seed, 1},
    {"_BoostMLR_randomShuffle", (DL_FUNC) &_BoostMLR_randomShuffle, 6},
    {"_BoostMLR_int_randomShuffle", (DL_FUNC) &_BoostMLR_int_randomShuffle, 6},
    {"_BoostMLR_single_integer_randomShuffle", (DL_FUNC) &_BoostMLR_single_integer_randomShuffle, 6},
    {"_BoostMLR_Reverse_Ordering", (DL_FUNC) &_BoostMLR_Reverse_Ordering, 1},
    {"_BoostMLR_RemoveNA", (DL_FUNC) &_BoostMLR_RemoveNA, 1},
    {"_BoostMLR_RemoveNA_Integer", (DL_FUNC) &_BoostMLR_RemoveNA_Integer, 1},
    {"_BoostMLR_RemoveNA_Character", (DL_FUNC) &_BoostMLR_RemoveNA_Character, 1},
    {"_BoostMLR_Max_C_NA", (DL_FUNC) &_BoostMLR_Max_C_NA, 1},
    {"_BoostMLR_Max_upper_limit_C_NA", (DL_FUNC) &_BoostMLR_Max_upper_limit_C_NA, 2},
    {"_BoostMLR_Min_C_NA", (DL_FUNC) &_BoostMLR_Min_C_NA, 1},
    {"_BoostMLR_stl_sort", (DL_FUNC) &_BoostMLR_stl_sort, 1},
    {"_BoostMLR_stl_sort_NA", (DL_FUNC) &_BoostMLR_stl_sort_NA, 1},
    {"_BoostMLR_stl_sort_reverse", (DL_FUNC) &_BoostMLR_stl_sort_reverse, 1},
    {"_BoostMLR_stl_sort_reverse_NA", (DL_FUNC) &_BoostMLR_stl_sort_reverse_NA, 1},
    {"_BoostMLR_unique_C", (DL_FUNC) &_BoostMLR_unique_C, 1},
    {"_BoostMLR_unique_C_NA", (DL_FUNC) &_BoostMLR_unique_C_NA, 1},
    {"_BoostMLR_unique_character_C_NA", (DL_FUNC) &_BoostMLR_unique_character_C_NA, 1},
    {"_BoostMLR_unique_integer_C", (DL_FUNC) &_BoostMLR_unique_integer_C, 1},
    {"_BoostMLR_unique_integer_C_NA", (DL_FUNC) &_BoostMLR_unique_integer_C_NA, 1},
    {"_BoostMLR_cumulative_integer_sum", (DL_FUNC) &_BoostMLR_cumulative_integer_sum, 1},
    {"_BoostMLR_sort_unique_C", (DL_FUNC) &_BoostMLR_sort_unique_C, 1},
    {"_BoostMLR_sort_unique_C_NA", (DL_FUNC) &_BoostMLR_sort_unique_C_NA, 1},
    {"_BoostMLR_sort_unique_integer_C", (DL_FUNC) &_BoostMLR_sort_unique_integer_C, 1},
    {"_BoostMLR_sort_unique_integer_C_NA", (DL_FUNC) &_BoostMLR_sort_unique_integer_C_NA, 1},
    {"_BoostMLR_pmax_two_integers", (DL_FUNC) &_BoostMLR_pmax_two_integers, 2},
    {"_BoostMLR_Which_Max_Matrix", (DL_FUNC) &_BoostMLR_Which_Max_Matrix, 1},
    {"_BoostMLR_Which_Max_Matrix_NA", (DL_FUNC) &_BoostMLR_Which_Max_Matrix_NA, 1},
    {"_BoostMLR_Which_Max_Matrix_NA_NRA", (DL_FUNC) &_BoostMLR_Which_Max_Matrix_NA_NRA, 1},
    {"_BoostMLR_Which_Min_Matrix_NA", (DL_FUNC) &_BoostMLR_Which_Min_Matrix_NA, 1},
    {"_BoostMLR_Which_Min_Matrix_NA_NRA", (DL_FUNC) &_BoostMLR_Which_Min_Matrix_NA_NRA, 1},
    {"_BoostMLR_rowSums_C", (DL_FUNC) &_BoostMLR_rowSums_C, 1},
    {"_BoostMLR_rowSums_C_NA", (DL_FUNC) &_BoostMLR_rowSums_C_NA, 1},
    {"_BoostMLR_isNA", (DL_FUNC) &_BoostMLR_isNA, 1},
    {"_BoostMLR_isNA_Numeric", (DL_FUNC) &_BoostMLR_isNA_Numeric, 1},
    {"_BoostMLR_any_function", (DL_FUNC) &_BoostMLR_any_function, 1},
    {"_BoostMLR_all_function", (DL_FUNC) &_BoostMLR_all_function, 1},
    {"_BoostMLR_Rho_Inv_C", (DL_FUNC) &_BoostMLR_Rho_Inv_C, 2},
    {"_BoostMLR_MatrixInversion_Equicorrelation_C", (DL_FUNC) &_BoostMLR_MatrixInversion_Equicorrelation_C, 3},
    {"_BoostMLR_Matrix_Vector_Multiplication_C", (DL_FUNC) &_BoostMLR_Matrix_Vector_Multiplication_C, 2},
    {"_BoostMLR_Matrix_Vector_Multiplication_C_naObs", (DL_FUNC) &_BoostMLR_Matrix_Vector_Multiplication_C_naObs, 2},
    {"_BoostMLR_interaction_two_integer_sets", (DL_FUNC) &_BoostMLR_interaction_two_integer_sets, 2},
    {"_BoostMLR_Matrix_Multiplication_Arma_C", (DL_FUNC) &_BoostMLR_Matrix_Multiplication_Arma_C, 2},
    {"_BoostMLR_Matrix_Sum_Arma_C_NA", (DL_FUNC) &_BoostMLR_Matrix_Sum_Arma_C_NA, 2},
    {"_BoostMLR_all_equal", (DL_FUNC) &_BoostMLR_all_equal, 2},
    {"_BoostMLR_convert_double_string", (DL_FUNC) &_BoostMLR_convert_double_string, 1},
    {"_BoostMLR_round_NumVector", (DL_FUNC) &_BoostMLR_round_NumVector, 2},
    {"_BoostMLR_round_double", (DL_FUNC) &_BoostMLR_round_double, 2},
    {"_BoostMLR_Convert_DF_into_NumMat", (DL_FUNC) &_BoostMLR_Convert_DF_into_NumMat, 1},
    {"_BoostMLR_DiagonalMatrix_C", (DL_FUNC) &_BoostMLR_DiagonalMatrix_C, 2},
    {"_BoostMLR_MatrixInversion_R", (DL_FUNC) &_BoostMLR_MatrixInversion_R, 1},
    {"_BoostMLR_MatrixInversion_C", (DL_FUNC) &_BoostMLR_MatrixInversion_C, 1},
    {"_BoostMLR_Subsetting_Dataframe", (DL_FUNC) &_BoostMLR_Subsetting_Dataframe, 2},
    {"_BoostMLR_create_index_logical_vector", (DL_FUNC) &_BoostMLR_create_index_logical_vector, 1},
    {"_BoostMLR_create_variable_by_substitution", (DL_FUNC) &_BoostMLR_create_variable_by_substitution, 2},
    {"_BoostMLR_create_sequence", (DL_FUNC) &_BoostMLR_create_sequence, 3},
    {"_BoostMLR_fit_component_gls", (DL_FUNC) &_BoostMLR_fit_component_gls, 4},
    {"_BoostMLR_fit_component_gls_line_search", (DL_FUNC) &_BoostMLR_fit_component_gls_line_search, 3},
    {"_BoostMLR_sq_residual", (DL_FUNC) &_BoostMLR_sq_residual, 4},
    {"_BoostMLR_extract_linear_pred", (DL_FUNC) &_BoostMLR_extract_linear_pred, 5},
    {"_BoostMLR_extract_base_learner", (DL_FUNC) &_BoostMLR_extract_base_learner, 4},
    {"_BoostMLR_extract_mu", (DL_FUNC) &_BoostMLR_extract_mu, 2},
    {"_BoostMLR_DataProcessing_C", (DL_FUNC) &_BoostMLR_DataProcessing_C, 12},
    {"_BoostMLR_BoostMLR_C", (DL_FUNC) &_BoostMLR_BoostMLR_C, 60},
    {"_BoostMLR_update_BoostMLR_C", (DL_FUNC) &_BoostMLR_update_BoostMLR_C, 64},
    {"_BoostMLR_predict_BoostMLR_C", (DL_FUNC) &_BoostMLR_predict_BoostMLR_C, 39},
    {"_BoostMLR_vimp_BoostMLR_C", (DL_FUNC) &_BoostMLR_vimp_BoostMLR_C, 52},
    {NULL, NULL, 0}
};

RcppExport void R_init_BoostMLR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
